---
globs: *.tsx,*.ts
---

# React Development Patterns

## Component Structure
- Use functional components with TypeScript
- Prefer named exports over default exports for components
- Use proper TypeScript interfaces for props
- Keep components focused on single responsibility

## State Management
- Use Zustand store for global state ([src/lib/room-store.ts](mdc:src/lib/room-store.ts))
- Use React's useState for local component state
- Use useEffect for side effects and lifecycle management

## Styling
- Use Tailwind CSS classes for styling
- Use the `cn()` utility from [src/lib/utils.ts](mdc:src/lib/utils.ts) for conditional classes
- Follow shadcn/ui component patterns for consistency
- Use CSS custom properties for theming (defined in [src/index.css](mdc:src/index.css))

## Imports
- Use path aliases (`@/`) for imports from src directory
- Group imports: React, third-party, local components, utilities
- Use named imports when possible

## Event Handling
- Use proper TypeScript types for event handlers
- Handle async operations with proper error handling
- Use React Router hooks (useNavigate, useParams) for navigation

## Component Composition
- Break down large components into smaller, reusable pieces
- Use children props for flexible component composition
- Pass data down via props, handle events via callbacks